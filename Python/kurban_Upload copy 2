import tkinter as tk
from tkinter import filedialog
import requests
import mimetypes
import os
import shutil

# Global değişkenler
global_token = None
selected_folder_path = None
ticket_response = None


def login():
    global global_token

    phone = entry_phone.get()
    password = entry_password.get()

    url = "https://staging.iddef.org/api/v2/user/login"
    data = {
        "password": password,
        "phone_number": phone,
        "country_phone_code": "90",
        "one_time_password": None
    }

    try:
        response = requests.post(url, json=data, timeout=10)
        if response.status_code == 200:
            json_data = response.json()
            token = json_data["user"].get("token")
            if token:
                global_token = token
                text_result.delete(1.0, tk.END)
                text_result.insert(tk.END, f"Giriş başarılı!\nToken:\n{token}")
                enable_ticket_fields(True)
            else:
                text_result.delete(1.0, tk.END)
                text_result.insert(tk.END, "Giriş başarısız: Token alınamadı.")
        else:
            error_msg = response.json().get("message", "Giriş başarısız!")
            text_result.delete(1.0, tk.END)
            text_result.insert(tk.END, error_msg)
    except requests.exceptions.RequestException as e:
        text_result.delete(1.0, tk.END)
        text_result.insert(tk.END, f"Bağlantı Hatası:\n{str(e)}")


def select_folder():
    global selected_folder_path
    selected_folder_path = filedialog.askdirectory()
    if not selected_folder_path:
        return
    text_result.delete(1.0, tk.END)
    text_result.insert(tk.END, f"Seçilen klasör: {selected_folder_path}\n")


def process_and_upload_all():
    if not selected_folder_path:
        text_result.insert(tk.END, "\nÖnce klasör seçmelisiniz!")
        return

    video_files = [f for f in os.listdir(selected_folder_path) if f.lower().endswith((".mp4", ".mov", ".avi", ".mkv"))]
    total = len(video_files)
    count = 0

    for file_name in video_files:
        file_path = os.path.join(selected_folder_path, file_name)

        try:
            name_parts = file_name.split(".")
            if len(name_parts) != 2:
                continue

            name_without_ext, ext = name_parts
            ext = ext.lower()
            split_parts = name_without_ext.split("_")
            if len(split_parts) != 3:
                continue

            qurban_no, qr_no, document_no = split_parts
            mime_type, _ = mimetypes.guess_type(file_path)

            ticket_data = {
                "document_no": document_no,
                "qurban_no": qurban_no,
                "city_name": entry_city.get() or "Unknown",
                "country_name": entry_country.get() or "Unknown",
                "extension": ext,
                "content_type": mime_type or "video"
            }

            headers = {
                "Authorization": f"Bearer {global_token}"
            }

            ticket_url = "https://staging.iddef.org/api/v3/qurban/video/generate-ticket"
            ticket_res = requests.post(ticket_url, headers=headers, json=ticket_data, timeout=10)

            if ticket_res.status_code != 200:
                text_result.insert(tk.END, f"\n{file_name} için ticket oluşturulamadı: {ticket_res.text}")
                continue

            ticket_response = ticket_res.json()
            conditions = ticket_response["conditions"]
            policy_base64 = ticket_response["policy_base64"]
            signature = ticket_response["signature"]

            with open(file_path, "rb") as f:
                files = {"file": f}
                data = {
                    "key": conditions["key"],
                    "acl": conditions["acl"],
                    "Content-Type": conditions["Content-Type"],
                    "success_action_redirect": conditions["success_action_redirect"],
                    "x-amz-server-side-encryption": conditions["x-amz-server-side-encryption"],
                    "x-amz-credential": conditions["x-amz-credential"],
                    "x-amz-algorithm": conditions["x-amz-algorithm"],
                    "x-amz-date": conditions["x-amz-date"],
                    "policy": policy_base64,
                    "x-amz-signature": signature
                }

                s3_url = "https://iddefstaging.s3.eu-central-1.amazonaws.com/"
                s3_response = requests.post(s3_url, data=data, files=files)

                if s3_response.status_code in [200, 204, 303]:
                    sent_dir = os.path.join(selected_folder_path, "sent")
                    os.makedirs(sent_dir, exist_ok=True)
                    shutil.move(file_path, os.path.join(sent_dir, file_name))
                    text_result.insert(tk.END, f"\n{file_name} başarıyla yüklendi.")
                else:
                    text_result.insert(tk.END, f"\n{file_name} yüklenemedi. Status: {s3_response.status_code}\nİçerik: {s3_response.text}")

        except Exception as e:
            text_result.insert(tk.END, f"\n{file_name} yüklenirken hata: {str(e)}")

        count += 1
        text_result.insert(tk.END, f"\nYüklenen video: {count}/{total}")
        text_result.see(tk.END)


def enable_ticket_fields(state=True):
    state_option = "normal" if state else "disabled"
    for widget in ticket_widgets:
        widget.configure(state=state_option)

# Arayüz
root = tk.Tk()
root.title("IDDEF Klasör Yükleyici")

# Giriş bölümü
tk.Label(root, text="Telefon Numarası:").grid(row=0, column=0)
entry_phone = tk.Entry(root)
entry_phone.grid(row=0, column=1)

tk.Label(root, text="Şifre:").grid(row=1, column=0)
entry_password = tk.Entry(root, show="*")
entry_password.grid(row=1, column=1)

tk.Button(root, text="Giriş Yap", command=login).grid(row=2, columnspan=2, pady=5)

# Klasör seçme butonu
tk.Button(root, text="Klasör Seç", command=select_folder).grid(row=3, columnspan=2, pady=5)

# Ticket formu
tk.Label(root, text="Şehir:").grid(row=4, column=0)
entry_city = tk.Entry(root)
entry_city.grid(row=4, column=1)

tk.Label(root, text="Ülke:").grid(row=5, column=0)
entry_country = tk.Entry(root)
entry_country.grid(row=5, column=1)

btn_upload_all = tk.Button(root, text="Yükle", command=process_and_upload_all)
btn_upload_all.grid(row=6, columnspan=2, pady=5)

# Sonuç gösterimi
text_result = tk.Text(root, height=15, width=70, wrap="word")
text_result.grid(row=7, column=0, columnspan=2)
scrollbar = tk.Scrollbar(root, command=text_result.yview)
text_result.configure(yscrollcommand=scrollbar.set)
scrollbar.grid(row=7, column=2, sticky="ns")

# Ticket alanları kontrol için liste
ticket_widgets = [entry_city, entry_country, btn_upload_all]
enable_ticket_fields(False)

root.mainloop()
